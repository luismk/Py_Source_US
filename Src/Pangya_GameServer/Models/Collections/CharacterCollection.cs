using PangyaAPI.Helper.BinaryModels;
using System;
using System.Collections.Generic;
using System.Text;
using PangyaAPI.IFF.Flags;
using PangyaAPI.IFF;
using Pangya_GameServer.Models.Data;
using PangyaAPI.PangyaClient.Data;
using System.IO;
namespace Pangya_GameServer.Models.Collections
{
    public class CharacterCollection : List<CharacterData>
    {
        public uint UID;
       
        public CharacterCollection(int ID)
        {
            UID = (uint)ID;
            var packet = new PangyaBinaryReader(new MemoryStream(new byte[] { 0x00, 0x00, 0x00, 0x04, 0x67, 0xEA, 0xF1, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x08, 0xA2, 0x60, 0x00, 0x08, 0x00, 0x84, 0x00, 0x08, 0x46, 0xA0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x00, 0x08, 0x00, 0x04, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x68, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x00, 0xBF, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x60, 0x4B, 0xDC, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x0F, 0x80, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x91, 0x72, 0x6B, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x08, 0x00, 0x24, 0x08, 0x08, 0x00, 0x44, 0x08, 0x08, 0x00, 0x64, 0x08, 0x08, 0x00, 0x84, 0x08, 0x08, 0x00, 0xA4, 0x08, 0x08, 0x00, 0xC4, 0x08, 0x08, 0x00, 0xE4, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }));
            var size =  packet.GetSize / 513;
            for (int i = 0; i < size; i++)
            {
                var character = new CharacterData
                {
                    Header = packet.Read<PlayerCharacter>()
                };
                Add(character);
            }         
        }


        public void UpdateCharacter(CharacterData character)
        {
            foreach (var Char in this)
            {
                if (Char.Header.Index == character.Header.Index && Char.Header.TypeID == character.Header.TypeID)
                {
                    Char.Update(character);
                }
            }
        }

        /// <summary>
        /// By LuisMK = 460 bytes for Character Data
        /// </summary>
        /// <param name="CharData">Character Information</param>
        /// <param name="CardMap">Card Information</param>
        /// <returns></returns>
        public byte[] CreateChar(CharacterData Character, byte[] CardMap)
        {
            PangyaBinaryWriter Packet;

            Packet = new PangyaBinaryWriter();
            try
            {
                Packet.WriteStruct(Character.Header);
                return Packet.GetBytes();
            }
            finally
            {
                Packet.Dispose();
            }
        }

        public CharacterData GetCharByType(byte charType)
        {
            switch ((HairColorFlag)charType)
            {
                case HairColorFlag.Nuri:
                    return GetChar(67108864, 1);
                case HairColorFlag.Hana:
                    return GetChar(67108865, 1);
                case HairColorFlag.Azer:
                    return GetChar(67108866, 1);
                case HairColorFlag.Cecilia:
                    return GetChar(67108867, 1);
                case HairColorFlag.Max:
                    return GetChar(67108868, 1);
                case HairColorFlag.Kooh:
                    return GetChar(67108869, 1);
                case HairColorFlag.Arin:
                    return GetChar(67108870, 1);
                case HairColorFlag.Kaz:
                    return GetChar(67108871, 1);
                case HairColorFlag.Lucia:
                    return GetChar(67108872, 1);
                case HairColorFlag.Nell:
                    return GetChar(67108873, 1);
                case HairColorFlag.Spika:
                    return GetChar(67108874, 1);
                case HairColorFlag.NR:
                    return GetChar(67108875, 1);
                case HairColorFlag.HR:
                    return GetChar(67108876, 1);
                case HairColorFlag.CR:
                    return GetChar(67108878, 1);
            }
            return null;
        }

        public CharacterData GetChar(UInt32 ID, uint GetType)
        {
            switch (GetType)
            {
                case 1:
                    foreach (CharacterData Char in this)
                    {
                        if (Char.Header.TypeID == ID)
                        {
                            return Char;
                        }
                    }
                    return null;
                case 0:
                    foreach (CharacterData Char in this)
                    {
                        if (Char.Header.Index == ID)
                        {
                            return Char;
                        }
                    }
                    return null;
            }
            return null;
        }


        /// <summary>
        /// Get Size 460 bytes
        /// </summary>
        /// <param name="CID"></param>
        /// <returns></returns>
        public byte[] GetCharData(UInt32 CID)
        {
            foreach (CharacterData Char in this)
            {
                if (Char.Header.Index == CID)
                {
                    return CreateChar(Char,  /*Card.MapCard(Char.Index)*/ new byte[0]);
                }
            }
            return new byte[460];
        }

        public byte[] Build()
        {
            PangyaBinaryWriter Packet;
            Packet = new PangyaBinaryWriter();
            try
            {
                Packet.Write(new byte[] { 0x70, 0x00 });
                Packet.WriteUInt16((ushort)this.Count);
                Packet.WriteUInt16((ushort)this.Count);
                foreach (CharacterData Char in this)
                {
                    Packet.Write(CreateChar(Char,  /*Card.MapCard(Char.Index)*/ new byte[0]));
                }
                return Packet.GetBytes();
            }
            finally
            {
                Packet.Dispose();
            }
        }
        /// <summary>
        /// String usada para salvar dados do Character, Status + Equipamentos
        /// </summary>
        /// <returns>string for Transation SQL SERVER</returns>
        public string GetSqlUpdateCharacter()
        {
            StringBuilder SQLString;
            SQLString = new StringBuilder();
            try
            {
                foreach (CharacterData Char in this)
                {
                    if (Char.NEEDUPDATE)
                    {
                        SQLString.Append(Char.GetSqlCharInfo());//string com informações do equipmento do char  
                    }
                    Char.SaveChar(UID);
                    Char.NEEDUPDATE = false;//seta como falso, para não causa erros ao salvar item
                }
                return SQLString.ToString();
            }
            finally
            {
                SQLString.Clear();
            }
        }
    }
}
